/*
Let's call an array arr a mountain if the following properties hold:

    arr.length >= 3
    There exists some i with 0 < i < arr.length - 1 such that:
        arr[0] < arr[1] < ... arr[i-1] < arr[i]
        arr[i] > arr[i+1] > ... > arr[arr.length - 1]

Given an integer array arr that is guaranteed to be a mountain, return any i such that
arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
*/

#include<iostream>
using namespace std;

int mountainarray(int arr[],int n){
	int start=0,end=n-1;
	while(start<=end){
		int mid=start+(end-start)/2;
		if(mid!=0&&mid!=n-1){
			if(arr[mid]>arr[mid+1]&&arr[mid]>arr[mid-1])
				  return mid;
			else if(arr[mid-1]>arr[mid])
				  end=mid-1;
			else
				  start=mid+1;
		}
		else if(mid==0){
			if(arr[mid]>arr[mid+1])
				 return mid;
			else
				 return mid+1;
		}
		else{
			if(arr[mid]>arr[mid-1])
				 return mid;
			else
				 return mid-1;
		}
	}
}

int main(){
	int n,arr[100];
	cout<<"Enter the size of the array"<<endl;
	cin>>n;
	
	cout<<"Enter the elements in the array"<<endl;
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	
	int peakindex=mountainarray(arr,n);
	cout<<peakindex;
}